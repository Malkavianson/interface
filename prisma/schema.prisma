generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../db.pdf"
}

model Usuario {
  id             String     @id @default(uuid())
  email          String     @unique
  senha          String
  role           String     @map("role")
  nome           String?
  dataNascimento String?    @map("data_nascimento")
  estadoCivil    String?    @map("estado_civil")
  profissao      String?
  telefone       String?    @unique
  cpf            String?    @unique
  rg             String?    @unique
  cnpj           String?    @unique
  inscEst        String?    @unique @map("insc_est")
  logradouro     String?
  numero         String?
  cep            String?
  bairro         String?
  cidade         String?
  estado         String?
  pais           String?
  favoritos      Favorito[]
  pedidos        Pedido[]
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  @@map("usuario")
}

model Produto {
  id               String            @id @unique @default(uuid())
  referencia       String            @unique
  descricao        String?
  disponibilidade  DateTime?
  especie          String?
  genero           String?
  imagens          String[]
  nome             String?
  portador         String?
  porte            String?
  preco            Int?
  status           String?
  visibilidade     String?
  tipo             String?
  categoriaId      String?           @map("categoria_id")
  Categoria        Categoria?        @relation(fields: [categoriaId], references: [id], onDelete: SetNull)
  Favoritos        Favorito[]
  PedidosDeProduto PedidoDeProduto[]
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime?         @updatedAt @map("updated_at")

  @@map("produto")
}

model Referencia {
  id        String   @id @default(uuid())
  posicao   Int      @unique
  pedidos   Pedido[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("chegada")
}

model Categoria {
  id        String    @id @default(uuid())
  nome      String    @unique
  produtos  Produto[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("categoria")
}

model Favorito {
  id        String   @id @default(uuid())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: NoAction)
  usuarioId String   @map("usuario_id")
  produto   Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  produtoId String   @map("produto_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([usuarioId, produtoId])
  @@map("favorito")
}

model Pedido {
  id           String            @id @default(uuid())
  status       String?
  referencia   Referencia?       @relation(fields: [referenciaId], references: [id], onDelete: SetNull)
  referenciaId String?           @map("referencia_id")
  usuario      Usuario?          @relation(fields: [usuarioId], references: [id], onDelete: SetNull)
  usuarioId    String?           @map("usuario_id")
  produtos     PedidoDeProduto[]
  createdAt    DateTime          @default(now()) @map("created_at")

  @@map("pedido")
}

model PedidoDeProduto {
  id         String   @id @default(uuid())
  quantidade Int
  produto    Produto  @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  produtoId  String   @map("produto_id")
  pedido     Pedido?  @relation(fields: [pedidoId], references: [id], onDelete: SetNull)
  pedidoId   String?  @map("pedido_id")
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("pedido_de_produto")
}
