generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../db.pdf"
}

model Users {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  cpf       String     @unique
  isAdmin   Boolean    @default(false) @map("is_admin")
  favorites Favorite[]
  orders    Order[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@map("users")
}

model Produto {
  id              String           @id @unique @default(uuid())
  referencia      String           @unique
  descricao       String?
  disponibilidade DateTime?
  especie         String?
  genero          String?
  imagens         String[]
  nome            String?
  portador        String?
  porte           String?
  preco           Int?
  status          String?
  visibilidade    String?
  tipo            String?
  Favorite        Favorite[]
  OrderToProduct  OrderToProduct[]
  Category        Category?        @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  categoryId      String?
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")

  @@map("produtos")
}

model Arrival {
  id        String   @id @default(uuid())
  number    Int      @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  orders    Order[]

  @@map("arrival")
}

model Category {
  id        String    @id @default(uuid())
  name      String    @unique
  produtos  Produto[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  @@map("category")
}

model Favorite {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now()) @map("created_at")
  user                Users    @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId              String   @map("user_id")
  produto             Produto  @relation(fields: [referenciaDoProduto], references: [referencia], onDelete: Cascade)
  referenciaDoProduto String   @map("referencia_do_produto")

  @@unique([userId, referenciaDoProduto])
  @@map("favorito")
}

model Order {
  id            String           @id @default(uuid())
  createdAt     DateTime         @default(now()) @map("created_at")
  arrival       Arrival?         @relation(fields: [arrivalNumber], references: [number], onDelete: SetNull)
  arrivalNumber Int?             @map("arrival_number")
  user          Users?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId        String?          @map("user_id")
  produtos      OrderToProduct[]

  @@map("order")
}

model OrderToProduct {
  id                  String   @id @default(uuid())
  createdAt           DateTime @default(now()) @map("created_at")
  produto             Produto  @relation(fields: [referenciaDoProduto], references: [referencia], onDelete: Cascade)
  referenciaDoProduto String   @map("referencia_do_produto")
  order               Order?   @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId             String?  @map("order_id")
  quantity            Int

  @@map("order_to_product")
}
